Dockerfile - файл с набором инструкции для создания образа.

Пример создания собственного образа из Dockerfile
1 ЭТАП (создание Dockerfile):
1) Создаем новую директорию: mkdir mydockerbuild и заходим в нее (cd mydockerbuild)
2) Создаем Dockerfile командой: touch Dockerfile
3) Добавляем строки в dockerfile:
FROM docker/whalesay:latest
RUN apt-get -y update && apt-get install -y fortunes
CMD /usr/games/fortune -a | cowsay
4) Сохраняем и закрываем файл
2 ЭТАП (сборка образа из Dockerfile):
Создаем образ с помощью команды (пробел с точкой в конце, для указания, что Dockerfile в этой директории): 
docker build -t docker-whale .
3 ЭТАП (запуск нового образа):
1) docker images - команда, которой выведет список образов.
2) docker run docker-whale - запустит созданный образ.

Основной синтаксис Dockerfile:

FROM - задает базовый образ для последующих инструкций.

MAINTAINER - позволяет указать имя автора.

RUN -  выполняет любые команды в новом слое поверх текущего образа и делает коммит результата. 
Полученный после коммита образ будет использован для следующего шага в Dockerfile.

CMD - передача параметров по-умолчанию для запуска контейнера. (CMD python app.py)

LABEL - добавляет метаданные для образа.

EXPOSE - указывает Docker что контейнер слушает определенные порты после запуска. EXPOSE не делает порты контейнера доступными для хоста. Для этого, вы должны использовать флаг -p (чтобы открыть диапазон портов) или флаг -P что бы открыть все порты из EXPOSE.

ENV - задает переменные окружения с именем <key> и значением <value>. Это значение будет находиться в окружении всех команд потомков Dockerfile и могут быть использованы как обычные переменные окружения.

ADD - копирует новые файлы, папки или или удаленные файлы по URLs из <src> и добавляет их в файловую систему контейнера в <dest>.

COPY - копирует новые файлы или каталоги из <src> и добавляет их в файловую систему контейнера в <dest>.

ENTRYPOINT - позволяет настроить контейнер так что бы он работал как исполняемый файл.
К примеру, следующая команда запустит nginx с прослушиванием 80 порта: docker run -i -t --rm -p 80:80 nginx

VOLUME - создает точку монтирования с заданным именем и помечает его как внешний смонтированный том из базового хоста или контейнера.
Пример:
FROM ubuntu
RUN mkdir /myvol
RUN echo "hello world" > /myvol/greeting
VOLUME /myvol
В результате запуска образа собранного из данного Dockerfile командой docker run, будет создана новая точка монтирования /myvol и в ней будет создан файл greeting.
